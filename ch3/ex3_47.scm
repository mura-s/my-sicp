; a. mutexを使ってセマフォを実装
(define (make-semaphore n)
    (let ((mutex (make-mutex))
          (count 0))
        (define (acquire)
            (mutex 'acquire)
            (cond ((< count n)
                    (set! count (+ count 1))
                    (mutex 'release))
                  (else
                    (mutex 'release)
                    (acquire)))
        (define (release)
            (mutex 'acquire)
            (if (> count 0)
                (set! count (- count 1))
                (error "error"))
            (mutex 'release))
        (define (the-semaphore m)
            (cond ((eq? m 'acquire) (acquire))
                  ((eq? m 'release) (release))))
        the-semaphore))

; b. test-and-set!を使ってセマフォを実装
(define (make-semaphore n)
    (let ((cell (list false))
          (count 0))
        (define (acquire)
            (if (test-and-set! cell)
                (acquire)
                (cond ((< count n)
                        (set! count (+ count 1))
                        (clear! cell))
                      (else
                        (clear! cell)
                        (acquire)))))
        (define (release)
            (if (test-and-set! cell)
                (release)
                (cond ((> count 0)
                        (set! count (- count 1))
                        (clear! cell))
                      (else
                        (error "error")))))
        (define (the-semaphore m)
            (cond ((eq? m 'acquire) (acquire))
                  ((eq? m 'release) (release))))
        the-semaphore))
