(define (serialized-exchange account1 account2)
    (let ((serializer1 (account1 'serializer))
          (serializer2 (account2 'serializer)
          (number1 (account1 'number)
          (number2 (account2 'number)))))
        (if (< number1 number2)
            ((serializer2 (serializer1 exchange))
                account1
                account2)
            ((serializer1 (serializer2 exchange))
                account1
                account2))))

(define (make-account-and-serializer balance)
    (define (withdraw amount)
        (if (>= balance amount)
            (begin (set! balance (- balance amount))
                   balance)
            "Insufficient funds"))
    (define (deposit amount)
        (set! balance (+ balance amount))
        balance)
    (let ((balance-serializer (make-serializer))
          (number (get-and-update-account-number)))
        (define (dispatch m)
            (cond ((eq? m 'withdraw) withdraw)
                  ((eq? m 'deposit) deposit)
                  ((eq? m 'balance) balance)
                  ((eq? m 'serializer) balance-serializer)
                  ((eq? m 'number) number)
                  (else (error "Unknown request -- MAKE-ACCOUNT" m))))
        dispatch))

(define account-number 0)
(define mutex (make-mutx))
(define (get-and-update-account-number)
    (mutex 'acquire)
    (let ((number account-number))
        (set! account-number (+ account-number 1))
        (mutex 'release)
        number))
