(define eceval-operations
    (list (list 'self-evaluating? self-evaluating?)
          (list 'variable? variable?)
          (list 'quoted? quoted?)
          (list 'assignment? assignment?)
          (list 'definition? definition?)
          (list 'if? if?)
          (list 'lambda? lambda?)
          (list 'begin? begin?)
          (list 'application? application?)
          ;;
          (list 'lookup-variable-value lookup-variable-value)
          (list 'text-of-quotation text-of-quotation)
          (list 'lambda-parameters lambda-parameters)
          (list 'lambda-body lambda-body)
          (list 'make-procedure make-procedure)
          (list 'operands operands)
          (list 'operator operator)
          (list 'empty-arglist empty-arglist)
          (list 'no-operands? no-operands?)
          (list 'first-operand first-operand)
          (list 'last-operand? last-operand?)
          (list 'adjoin-arg adjoin-arg)
          (list 'rest-operands rest-operands)
          (list 'primitive-procedure? primitive-procedure?)
          (list 'compound-procedure? compound-procedure?)
          (list 'apply-primitive-procedure apply-primitive-procedure)
          (list 'procedure-parameters procedure-parameters)
          (list 'procedure-environment procedure-environment)
          (list 'extend-environment extend-environment)
          (list 'procedure-body procedure-body)
          (list 'begin-actions begin-actions)
          (list 'first-exp first-exp)
          (list 'last-exp? last-exp?)
          (list 'rest-exps rest-exps)
          (list 'if-predicate if-predicate)
          (list 'true? true?)
          (list 'if-alternative if-alternative)
          (list 'if-consequent if-consequent)
          (list 'assignment-variable assignment-variable)
          (list 'assignment-value assignment-value)
          (list 'set-variable-value! set-variable-value!)
          (list 'definition-variable definition-variable)
          (list 'definition-value definition-value)
          (list 'define-variable! define-variable!)
          (list 'prompt-for-input prompt-for-input)
          (list 'read read)
          (list 'get-global-environment get-global-environment)
          (list 'announce-output announce-output)
          (list 'user-print user-print)
          ;; condを追加
          (list 'cond? cond?)
          (list 'cond->if cond-if)
          ))

(define eceval
    (make-machine
        '(exp env val proc argl continue unev)
    eceval-operations
    '(
        ;; 省略
        eval-dispatch
            (test (op self-evaluating?) (reg exp))
            (branch (label ev-self-eval))
            (test (op variable?) (reg exp))
            (branch (label ev-variable))
            (test (op quoted?) (reg exp))
            (branch (label ev-quoted))
            (test (op assignment?) (reg exp))
            (branch (label ev-assignment))
            (test (op definition?) (reg exp))
            (branch (label ev-definition))
            ;; condを追加
            (test (op cond?) (reg exp))
            (branch (label ev-cond))
            (test (op if?) (reg exp))
            (branch (label ev-if))
            (test (op lambda?) (reg exp))
            (branch (label ev-lambda))
            (test (op begin?) (reg exp))
            (branch (label ev-begin))
            (test (op application?) (reg exp))
            (branch (label ev-application))
            (goto (label unknown-expression-type))
        ;; 省略
        ev-cond
            (assign exp (op cond->if) (reg exp))
            (goto (label eval-dispatch))
        ;; 省略
